const m1 = math.Matrix4.fromValues(7, 3, 6, 9, 2, 3, 2, 5, 1, 9, 5, 8, 3, 7, 2, 2);
    const m2 = math.Matrix4.fromValues(2, 5, 7, 8, 4, 8, 3, 9, 2, 5, 4, 9, 5, 6, 3, 1);
    const m3 = math.Matrix4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    const m1j = mathJS.mat4.create();
    const m2j = mathJS.mat4.create();
    const m3j = mathJS.mat4.create();

    const memory = new WebAssembly.Memory({ initial: 256 });
    const imports = {
        global: {
            NaN: 5,
            Infinity: 6
        },
        env: {
            memoryBase: 0,
            memory: memory,
        }
    };
    let r: any = await fetch('/assets/matrix.wasm');
    r = await r.arrayBuffer();
    console.log(imports);
    r = await WebAssembly.instantiate(r, imports);
    const ins = r.instance;
    console.log(r);
    const multiply = ins.exports.__Z8multiplyPfS_S_;

    const a = new Float32Array(memory.buffer, 1048576, 16);
    const b = new Float32Array(memory.buffer, 1048576 + 18 * 4, 16);
    const c = new Float32Array(memory.buffer, 1048576 + 36 * 4, 16);

    a.set([7, 3, 6, 9, 2, 3, 2, 5, 1, 9, 5, 8, 3, 7, 2, 2]);
    b.set([2, 5, 7, 8, 4, 8, 3, 9, 2, 5, 4, 9, 5, 6, 3, 1]);
    c.set([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);

    const runTimes = 10000;
    let ts = performance.now();
    for (let index = 0; index < runTimes; index++) {
      math.Matrix4.multiply(m3, m1, m2);
    }
    console.log('RUST', performance.now() - ts);
    ts = performance.now();
    for (let i = 0; i < runTimes; i++) {
      multiply(1048576 + 36 * 4, 1048576, 1048576 + 18 * 4);
    }
    console.log('CPP', performance.now() - ts);
    ts = performance.now();
    for (let index = 0; index < runTimes; index++) {
      mathJS.mat4.multiply(m1j, m2j, m3j);
    }
    console.log('JS', performance.now() - ts);